// Firebase Security Rules for Firestore
// Copy these rules to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }
    
    // Channels collection
    match /channels/{channelId} {
      function isMember() {
        return isSignedIn() && (resource.data.members.hasAny([request.auth.uid]) || resource.data.isPublic == true);
      }
      
      allow read: if isMember();
      allow create: if isSignedIn() && 
                   request.resource.data.createdBy == request.auth.uid &&
                   request.resource.data.members.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && 
                   (resource.data.createdBy == request.auth.uid || 
                    resource.data.members.hasAny([request.auth.uid]));
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }
    
    // Posts collection
    match /posts/{postId} {
      function canAccessChannel() {
        let channelId = resource.data.channelId;
        let channel = get(/databases/$(database)/documents/channels/$(channelId));
        return channel.data.isPublic == true || 
               (isSignedIn() && channel.data.members.hasAny([request.auth.uid]));
      }
      
      allow read: if canAccessChannel();
      allow create: if isSignedIn() && 
                   request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }
  }
} 